{"version":3,"file":"ssr.cjs.js","sources":["effector-vue/ssr/VueSSRPlugin.ts","effector-vue/ssr/useEvent.ts","effector-vue/lib/get-scope.ts"],"sourcesContent":["import {Scope} from \"effector\"\nimport {Plugin} from \"vue-next\"\n\nexport function VueSSRPlugin(options: {scope: Scope; scopeName?: string}): Plugin {\n  return {\n    install(app) {\n      let scopeName = options.scopeName ?? \"root\"\n\n      app.config.globalProperties.scopeName = scopeName\n      app.provide(app.config.globalProperties.scopeName, options.scope)\n    }\n  }\n}\n","import {Event, scopeBind} from \"effector\"\n\nimport {getScope} from \"../lib/get-scope\"\n\nexport function useEvent<T>(event: Event<T>) {\n  let {scope} = getScope()\n\n  if (scope) {\n    return scopeBind(event, {\n      scope\n    })\n  }\n\n  return event\n}\n","import {Scope} from \"effector\"\nimport {getCurrentInstance, inject} from \"vue-next\"\n\nexport function getScope() {\n  let scope: Scope | undefined\n  let ctx = getCurrentInstance()\n  let scopeName: string | undefined = ctx?.appContext.config.globalProperties.scopeName\n\n  if (scopeName) {\n    scope = inject(scopeName)\n  }\n\n  return {\n    scopeName,\n    scope,\n  }\n}\n"],"names":["options","install","app","scopeName","config","globalProperties","provide","scope","event","ctx","getCurrentInstance","appContext","inject","getScope","scopeBind"],"mappings":"6HAG6BA,IACpB,CACLC,QAAQC,aACFC,YAAYH,EAAQG,yBAAa,OAErCD,EAAIE,OAAOC,iBAAiBF,UAAYA,EACxCD,EAAII,QAAQJ,EAAIE,OAAOC,iBAAiBF,UAAWH,EAAQO,2BCLrCC,QACtBD,MAACA,GCFA,UACDA,EACAE,EAAMC,uBACNP,EAAgCM,MAAAA,SAAAA,EAAKE,WAAWP,OAAOC,iBAAiBF,iBAExEA,IACFI,EAAQK,SAAOT,IAGV,CACLA,UAAAA,EACAI,MAAAA,IDTYM,UAEVN,EACKO,mBAAUN,EAAO,CACtBD,MAAAA,IAIGC"}